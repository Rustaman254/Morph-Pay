"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Users = void 0;
const resource_1 = require("../core/resource.js");
const pagination_1 = require("../core/pagination.js");
const headers_1 = require("../internal/headers.js");
const path_1 = require("../internal/utils/path.js");
class Users extends resource_1.APIResource {
    /**
     * Create a new user with linked accounts. Optionally pre-generate embedded wallets
     * for the user.
     *
     * @example
     * ```ts
     * const user = await client.users.create({
     *   linked_accounts: [
     *     { address: 'tom.bombadill@privy.io', type: 'email' },
     *   ],
     * });
     * ```
     */
    create(body, options) {
        return this._client.post('/v1/users', { body, ...options });
    }
    /**
     * Get all users in your app.
     *
     * @example
     * ```ts
     * // Automatically fetches more pages as needed.
     * for await (const user of client.users.list()) {
     *   // ...
     * }
     * ```
     */
    list(query = {}, options) {
        return this._client.getAPIList('/v1/users', (pagination_1.Cursor), { query, ...options });
    }
    /**
     * Delete a user by user ID.
     *
     * @example
     * ```ts
     * await client.users.delete('user_id');
     * ```
     */
    delete(userID, options) {
        return this._client.delete((0, path_1.path) `/v1/users/${userID}`, {
            ...options,
            headers: (0, headers_1.buildHeaders)([{ Accept: '*/*' }, options?.headers]),
        });
    }
    /**
     * Get a user by user ID.
     *
     * @example
     * ```ts
     * const user = await client.users._get('user_id');
     * ```
     */
    _get(userID, options) {
        return this._client.get((0, path_1.path) `/v1/users/${userID}`, options);
    }
    /**
     * Looks up a user by their custom auth ID.
     *
     * @example
     * ```ts
     * const user = await client.users.getByCustomAuthID({
     *   custom_user_id: 'custom_user_id',
     * });
     * ```
     */
    getByCustomAuthID(body, options) {
        return this._client.post('/v1/users/custom_auth/id', { body, ...options });
    }
    /**
     * Looks up a user by their Discord username.
     *
     * @example
     * ```ts
     * const user = await client.users.getByDiscordUsername({
     *   username: 'username',
     * });
     * ```
     */
    getByDiscordUsername(body, options) {
        return this._client.post('/v1/users/discord/username', { body, ...options });
    }
    /**
     * Looks up a user by their email address.
     *
     * @example
     * ```ts
     * const user = await client.users.getByEmailAddress({
     *   address: 'dev@stainless.com',
     * });
     * ```
     */
    getByEmailAddress(body, options) {
        return this._client.post('/v1/users/email/address', { body, ...options });
    }
    /**
     * Looks up a user by their Farcaster ID.
     *
     * @example
     * ```ts
     * const user = await client.users.getByFarcasterID({
     *   fid: 0,
     * });
     * ```
     */
    getByFarcasterID(body, options) {
        return this._client.post('/v1/users/farcaster/fid', { body, ...options });
    }
    /**
     * Looks up a user by their Github username.
     *
     * @example
     * ```ts
     * const user = await client.users.getByGitHubUsername({
     *   username: 'username',
     * });
     * ```
     */
    getByGitHubUsername(body, options) {
        return this._client.post('/v1/users/github/username', { body, ...options });
    }
    /**
     * Looks up a user by their phone number.
     *
     * @example
     * ```ts
     * const user = await client.users.getByPhoneNumber({
     *   number: 'number',
     * });
     * ```
     */
    getByPhoneNumber(body, options) {
        return this._client.post('/v1/users/phone/number', { body, ...options });
    }
    /**
     * Looks up a user by their smart wallet address.
     *
     * @example
     * ```ts
     * const user = await client.users.getBySmartWalletAddress({
     *   address: 'address',
     * });
     * ```
     */
    getBySmartWalletAddress(body, options) {
        return this._client.post('/v1/users/smart_wallet/address', { body, ...options });
    }
    /**
     * Looks up a user by their Telegram user ID.
     *
     * @example
     * ```ts
     * const user = await client.users.getByTelegramUserID({
     *   telegram_user_id: 'telegram_user_id',
     * });
     * ```
     */
    getByTelegramUserID(body, options) {
        return this._client.post('/v1/users/telegram/telegram_user_id', { body, ...options });
    }
    /**
     * Looks up a user by their Telegram username.
     *
     * @example
     * ```ts
     * const user = await client.users.getByTelegramUsername({
     *   username: 'username',
     * });
     * ```
     */
    getByTelegramUsername(body, options) {
        return this._client.post('/v1/users/telegram/username', { body, ...options });
    }
    /**
     * Looks up a user by their Twitter subject.
     *
     * @example
     * ```ts
     * const user = await client.users.getByTwitterSubject({
     *   subject: 'subject',
     * });
     * ```
     */
    getByTwitterSubject(body, options) {
        return this._client.post('/v1/users/twitter/subject', { body, ...options });
    }
    /**
     * Looks up a user by their Twitter username.
     *
     * @example
     * ```ts
     * const user = await client.users.getByTwitterUsername({
     *   username: 'username',
     * });
     * ```
     */
    getByTwitterUsername(body, options) {
        return this._client.post('/v1/users/twitter/username', { body, ...options });
    }
    /**
     * Looks up a user by their wallet address.
     *
     * @example
     * ```ts
     * const user = await client.users.getByWalletAddress({
     *   address: 'address',
     * });
     * ```
     */
    getByWalletAddress(body, options) {
        return this._client.post('/v1/users/wallet/address', { body, ...options });
    }
    /**
     * Creates an embedded wallet for an existing user.
     *
     * @example
     * ```ts
     * const user = await client.users.pregenerateWallets(
     *   'user_id',
     *   { wallets: [{ chain_type: 'ethereum' }] },
     * );
     * ```
     */
    pregenerateWallets(userID, body, options) {
        return this._client.post((0, path_1.path) `/v1/users/${userID}/wallets`, { body, ...options });
    }
    /**
     * Search users by search term, emails, phone numbers, or wallet addresses.
     *
     * @example
     * ```ts
     * const user = await client.users.search({
     *   search_term: 'search_term',
     * });
     * ```
     */
    search(body, options) {
        return this._client.post('/v1/users/search', { body, ...options });
    }
    /**
     * Adds custom metadata to a user by user ID.
     *
     * @example
     * ```ts
     * const user = await client.users.setCustomMetadata(
     *   'user_id',
     *   { custom_metadata: { key: 'value' } },
     * );
     * ```
     */
    setCustomMetadata(userID, body, options) {
        return this._client.post((0, path_1.path) `/v1/users/${userID}/custom_metadata`, { body, ...options });
    }
    /**
     * Unlinks a user linked account.
     *
     * @example
     * ```ts
     * const user = await client.users.unlinkLinkedAccount(
     *   'user_id',
     *   { handle: 'test@test.com', type: 'email' },
     * );
     * ```
     */
    unlinkLinkedAccount(userID, body, options) {
        return this._client.post((0, path_1.path) `/v1/users/${userID}/accounts/unlink`, { body, ...options });
    }
}
exports.Users = Users;
//# sourceMappingURL=users.js.map