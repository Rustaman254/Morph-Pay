export class PrivySolanaService {
    constructor(privyWalletsService) {
        this.privyWalletsService = privyWalletsService;
    }
    async signMessage(walletId, { message, ...input }) {
        let params;
        if (message instanceof Uint8Array) {
            // We fall back to `Buffer` here as Uint8Array.toBase64 is not widely supported yet
            params = { message: Buffer.from(message).toString('base64'), encoding: 'base64' };
        }
        else {
            // Strings are assumed to be base64 encoded
            params = { message, encoding: 'base64' };
        }
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'signMessage',
            chain_type: 'solana',
            params,
        });
        return response.data;
    }
    async signTransaction(walletId, { transaction, ...input }) {
        let params;
        if (transaction instanceof Uint8Array) {
            // We fall back to `Buffer` here as Uint8Array.toBase64 is not widely supported yet
            params = { transaction: Buffer.from(transaction).toString('base64'), encoding: 'base64' };
        }
        else {
            // Strings are assumed to be base64 encoded
            params = { transaction, encoding: 'base64' };
        }
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'signTransaction',
            chain_type: 'solana',
            params,
        });
        return response.data;
    }
    async signAndSendTransaction(walletId, { transaction, ...input }) {
        let params;
        if (transaction instanceof Uint8Array) {
            // We fall back to `Buffer` here as Uint8Array.toBase64 is not widely supported yet
            params = { transaction: Buffer.from(transaction).toString('base64'), encoding: 'base64' };
        }
        else {
            // Strings are assumed to be base64 encoded
            params = { transaction, encoding: 'base64' };
        }
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'signAndSendTransaction',
            chain_type: 'solana',
            params,
        });
        return response.data;
    }
}
//# sourceMappingURL=solana.mjs.map