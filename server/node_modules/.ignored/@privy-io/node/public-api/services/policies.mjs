import { generateAuthorizationSignatures } from "../../lib/authorization.mjs";
import { Policies, } from "../../resources.mjs";
export class PrivyPoliciesService extends Policies {
    constructor(privyApiClient, privyClient) {
        super(privyApiClient);
        this.privyClient = privyClient;
    }
    async update(policyId, { authorization_context: authorizationContext = {}, ...params }) {
        const authorizationSignaturesHeader = await generateAuthorizationSignatures(this.privyClient, {
            authorizationContext,
            input: {
                version: 1,
                method: 'PATCH',
                url: `${this._client.baseURL}/v1/policies/${policyId}`,
                body: params,
                headers: {
                    'privy-app-id': this._client.appID,
                },
            },
        });
        const response = await this._update(policyId, {
            ...params,
            'privy-authorization-signature': authorizationSignaturesHeader.join(','),
        });
        return response;
    }
    async delete(policyId, { authorization_context: authorizationContext = {}, ...params }) {
        const authorizationSignaturesHeader = await generateAuthorizationSignatures(this.privyClient, {
            authorizationContext,
            input: {
                version: 1,
                method: 'DELETE',
                url: `${this._client.baseURL}/v1/policies/${policyId}`,
                body: params,
                headers: {
                    'privy-app-id': this._client.appID,
                },
            },
        });
        const response = await this._delete(policyId, {
            ...params,
            'privy-authorization-signature': authorizationSignaturesHeader.join(','),
        });
        return response;
    }
    async createRule(policyId, { authorization_context: authorizationContext = {}, ...params }) {
        const authorizationSignaturesHeader = await generateAuthorizationSignatures(this.privyClient, {
            authorizationContext,
            input: {
                version: 1,
                method: 'POST',
                url: `${this._client.baseURL}/v1/policies/${policyId}/rules`,
                body: params,
                headers: {
                    'privy-app-id': this._client.appID,
                },
            },
        });
        const response = await this._createRule(policyId, {
            ...params,
            'privy-authorization-signature': authorizationSignaturesHeader.join(','),
        });
        return response;
    }
    async updateRule(ruleId, { authorization_context: authorizationContext = {}, policy_id: policyId, ...params }) {
        const authorizationSignaturesHeader = await generateAuthorizationSignatures(this.privyClient, {
            authorizationContext,
            input: {
                version: 1,
                method: 'PATCH',
                url: `${this._client.baseURL}/v1/policies/${policyId}/rules/${ruleId}`,
                body: params,
                headers: {
                    'privy-app-id': this._client.appID,
                },
            },
        });
        const response = await this._updateRule(ruleId, {
            ...params,
            policy_id: policyId,
            'privy-authorization-signature': authorizationSignaturesHeader.join(','),
        });
        return response;
    }
    async deleteRule(ruleId, { authorization_context: authorizationContext = {}, policy_id: policyId, ...params }) {
        const authorizationSignaturesHeader = await generateAuthorizationSignatures(this.privyClient, {
            authorizationContext,
            input: {
                version: 1,
                method: 'DELETE',
                url: `${this._client.baseURL}/v1/policies/${policyId}/rules/${ruleId}`,
                body: params,
                headers: {
                    'privy-app-id': this._client.appID,
                },
            },
        });
        const response = await this._deleteRule(ruleId, {
            ...params,
            policy_id: policyId,
            'privy-authorization-signature': authorizationSignaturesHeader.join(','),
        });
        return response;
    }
}
//# sourceMappingURL=policies.mjs.map