import { PrivyAPI } from "../../client.mjs";
import { Wallet, WalletExportParams, WalletRawSignParams, WalletRawSignResponse, WalletRpcParams, WalletRpcResponse, Wallets, WalletSubmitImportParams, WalletUpdateParams } from "../../resources.mjs";
import { PrivyClient } from "../PrivyClient.mjs";
import { PrivyEthereumService } from "./ethereum.mjs";
import { PrivySolanaService } from "./solana.mjs";
import { Prettify, WithAuthorization, WithIdempotency } from "./types.mjs";
export declare class PrivyWalletsService extends Wallets {
    private ethereumService;
    private solanaService;
    private privyClient;
    constructor(privyApiClient: PrivyAPI, privyClient: PrivyClient);
    ethereum(): PrivyEthereumService;
    solana(): PrivySolanaService;
    rpc<Params extends PrivyWalletsService.RpcInput>(walletId: string, params: Params): Promise<Extract<WalletRpcResponse, {
        method: Params['method'];
    }>>;
    rawSign(walletId: string, { authorization_context: authorizationContext, idempotency_key: idempotencyKey, ...params }: PrivyWalletsService.RawSignInput): Promise<WalletRawSignResponse.Data>;
    update(walletId: string, { authorization_context: authorizationContext, ...params }: PrivyWalletsService.UpdateInput): Promise<Wallet>;
    export(walletId: string, { authorization_context: authorizationContext, ...outerParams }: PrivyWalletsService.ExportInput): Promise<PrivyWalletsService.ExportResponse>;
    import({ wallet: { private_key, ...wallet }, ...params }: PrivyWalletsService.ImportInput): Promise<Wallet>;
}
/**
 * The namespace for types related to the Wallets service class.
 * @see {@link PrivyWalletsService} class.
 */
export declare namespace PrivyWalletsService {
    /** The input type for the {@link PrivyWalletsService.rpc} method. */
    type RpcInput = Prettify<WithIdempotency<WithAuthorization<WalletRpcParams>>>;
    /** The input type for the {@link PrivyWalletsService.rawSign} method. */
    type RawSignInput = Prettify<WithIdempotency<WithAuthorization<WalletRawSignParams>>>;
    /** The input type for the {@link PrivyWalletsService.update} method. */
    type UpdateInput = Prettify<WithAuthorization<WalletUpdateParams>>;
    /** The input type for the {@link PrivyWalletsService.export} method. */
    type ExportInput = Prettify<WithAuthorization<Omit<WalletExportParams, 'encryption_type' | 'recipient_public_key'>>>;
    /** The response type for the {@link PrivyWalletsService.export} method. */
    type ExportResponse = {
        private_key: string;
    };
    type ImportInputWallet = Prettify<(Omit<WalletSubmitImportParams.HDSubmitInput, 'encapsulated_key' | 'ciphertext' | 'encryption_type'> | Omit<WalletSubmitImportParams.PrivateKeySubmitInput, 'encapsulated_key' | 'ciphertext' | 'encryption_type'>) & {
        private_key: Uint8Array | string;
    }>;
    /** The input type for the {@link PrivyWalletsService.import} method. */
    type ImportInput = Prettify<Omit<WalletSubmitImportParams, 'wallet'> & {
        wallet: ImportInputWallet;
    }>;
}
/**
 * Helper type for the input to the RPC utility methods, such as `ethereum().signMessage()`.
 * It modifies the raw input to the RPC method ({@link WalletRpcParams}) to:
 * - Include the idempotency key string in place of the idempotency HTTP header via {@link WithIdempotency}
 * - Include the authorization context over the authorization signature HTTP header via {@link WithAuthorization}
 *
 * Finally, it omits the `chain_type` and `method` properties from the input, as these will be
 * internally set by the RPC utility method used.
 * e.g. `ethereum().signMessage()` will set `chain_type=ethereum` and `method=personal_sign`.
 */
export type PrivyWalletsRpcInput<Params extends WalletRpcParams> = Prettify<WithIdempotency<WithAuthorization<Omit<Params, 'chain_type' | 'method'>>>>;
/**
 * Helper type that takes a parameters object and an extension object and returns a new parameters
 * object with the extension object merged in, and the `params` property omitted.
 *
 * This is used to turn Params objects that accept the raw `params` object into ones that accept a
 * more ergonomic extension object instead that can be used internally by Privy's service methods to
 * turn into the right value for `params`.
 *
 * e.g. `ethereum().signMessage()` will accept a `message` string or `Uint8Array` that is
 * automatically converted to the right `{ message: '...', encoding: '...' }` object.
 */
export type ReplaceParams<Params, Extension> = Prettify<Omit<Params, 'params'> & Extension>;
//# sourceMappingURL=wallets.d.mts.map