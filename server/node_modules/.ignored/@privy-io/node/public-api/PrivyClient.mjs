import { PrivyAPI } from "../client.mjs";
import { PrivyWalletsService } from "./services/wallets.mjs";
import { PrivyPoliciesService } from "./services/policies.mjs";
import { PrivyTransactionsService } from "./services/transactions.mjs";
import { PrivyKeyQuorumsService } from "./services/key-quorums.mjs";
import { PrivyUsersService } from "./services/users.mjs";
import { PrivyUtils } from "./services/utils.mjs";
import { JwtExchangeService } from "../lib/jwt-exchange.mjs";
import { VERSION } from "../version.mjs";
import { createPrivyAppJWKS } from "../lib/auth.mjs";
const DEFAULT_AUTHORIZATION_KEY_CACHE_MAX_CAPACITY = 1000;
export class PrivyClient {
    /** @internal */
    _jwtExchange() {
        return this.jwtExchangeService;
    }
    constructor({ appId, appSecret, apiUrl, authorizationKeyCacheMaxCapacity = DEFAULT_AUTHORIZATION_KEY_CACHE_MAX_CAPACITY, defaultHeaders, jwtVerificationKey, ...clientOptions }) {
        this.privyApiClient = new PrivyAPI({
            ...clientOptions,
            appID: appId,
            appSecret: appSecret,
            baseURL: apiUrl,
            defaultHeaders: {
                ...defaultHeaders,
                // Convention is: <client_name>:<semantic_version>
                'privy-client': `node:${VERSION}`,
            },
        });
        const appJwks = createPrivyAppJWKS({
            appId: this.privyApiClient.appID,
            apiUrl: this.privyApiClient.baseURL,
            headers: { 'privy-client': `node:${VERSION}` },
            verificationKeyOverride: jwtVerificationKey,
        });
        this.jwtExchangeService = new JwtExchangeService(this.privyApiClient.wallets, authorizationKeyCacheMaxCapacity);
        this.walletsService = new PrivyWalletsService(this.privyApiClient, this);
        this.policiesService = new PrivyPoliciesService(this.privyApiClient, this);
        this.transactionsService = new PrivyTransactionsService(this.privyApiClient);
        this.keyQuorumsService = new PrivyKeyQuorumsService(this.privyApiClient, this);
        this.usersService = new PrivyUsersService(this.privyApiClient, appJwks);
        this.utilsService = new PrivyUtils(this.privyApiClient, this, appJwks);
    }
    wallets() {
        return this.walletsService;
    }
    policies() {
        return this.policiesService;
    }
    transactions() {
        return this.transactionsService;
    }
    keyQuorums() {
        return this.keyQuorumsService;
    }
    users() {
        return this.usersService;
    }
    utils() {
        return this.utilsService;
    }
}
//# sourceMappingURL=PrivyClient.mjs.map