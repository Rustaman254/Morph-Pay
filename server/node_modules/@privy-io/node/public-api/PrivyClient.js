"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivyClient = void 0;
const client_1 = require("../client.js");
const wallets_1 = require("./services/wallets.js");
const policies_1 = require("./services/policies.js");
const transactions_1 = require("./services/transactions.js");
const key_quorums_1 = require("./services/key-quorums.js");
const users_1 = require("./services/users.js");
const utils_1 = require("./services/utils.js");
const jwt_exchange_1 = require("../lib/jwt-exchange.js");
const version_1 = require("../version.js");
const auth_1 = require("../lib/auth.js");
const DEFAULT_AUTHORIZATION_KEY_CACHE_MAX_CAPACITY = 1000;
class PrivyClient {
    /** @internal */
    _jwtExchange() {
        return this.jwtExchangeService;
    }
    constructor({ appId, appSecret, apiUrl, authorizationKeyCacheMaxCapacity = DEFAULT_AUTHORIZATION_KEY_CACHE_MAX_CAPACITY, defaultHeaders, jwtVerificationKey, ...clientOptions }) {
        this.privyApiClient = new client_1.PrivyAPI({
            ...clientOptions,
            appID: appId,
            appSecret: appSecret,
            baseURL: apiUrl,
            defaultHeaders: {
                ...defaultHeaders,
                // Convention is: <client_name>:<semantic_version>
                'privy-client': `node:${version_1.VERSION}`,
            },
        });
        const appJwks = (0, auth_1.createPrivyAppJWKS)({
            appId: this.privyApiClient.appID,
            apiUrl: this.privyApiClient.baseURL,
            headers: { 'privy-client': `node:${version_1.VERSION}` },
            verificationKeyOverride: jwtVerificationKey,
        });
        this.jwtExchangeService = new jwt_exchange_1.JwtExchangeService(this.privyApiClient.wallets, authorizationKeyCacheMaxCapacity);
        this.walletsService = new wallets_1.PrivyWalletsService(this.privyApiClient, this);
        this.policiesService = new policies_1.PrivyPoliciesService(this.privyApiClient, this);
        this.transactionsService = new transactions_1.PrivyTransactionsService(this.privyApiClient);
        this.keyQuorumsService = new key_quorums_1.PrivyKeyQuorumsService(this.privyApiClient, this);
        this.usersService = new users_1.PrivyUsersService(this.privyApiClient, appJwks);
        this.utilsService = new utils_1.PrivyUtils(this.privyApiClient, this, appJwks);
    }
    wallets() {
        return this.walletsService;
    }
    policies() {
        return this.policiesService;
    }
    transactions() {
        return this.transactionsService;
    }
    keyQuorums() {
        return this.keyQuorumsService;
    }
    users() {
        return this.usersService;
    }
    utils() {
        return this.utilsService;
    }
}
exports.PrivyClient = PrivyClient;
//# sourceMappingURL=PrivyClient.js.map