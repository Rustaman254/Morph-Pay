import { generateAuthorizationSignature, generateAuthorizationSignatures } from "../../../lib/authorization.js";
import { PrivyClient } from "../../PrivyClient.js";
export declare class PrivyRequestSigner {
    private privyClient;
    constructor(privyClient: PrivyClient);
    generateAuthorizationSignature: typeof generateAuthorizationSignature;
    generateAuthorizationSignatures(...input: PrivyRequestSigner.GenerateAuthorizationSignaturesInput): Promise<string[]>;
}
export declare namespace PrivyRequestSigner {
    type GenerateAuthorizationSignaturesInput = ParametersExceptFirst<typeof generateAuthorizationSignatures>;
}
/**
 * Utility type similar to `Parameters` but excluding the first argument.
 * This is used to get the types of the remaining arguments of a function, excluding the first one.
 *
 * @example
 * ```ts
 * type MyFunction = (arg0: string, arg1: number, arg2: boolean) => any;
 * type MyFunctionParameters = ParametersExceptFirst<MyFunction>;
 * // type MyFunctionParameters = [number, boolean]
 * ```
 */
type ParametersExceptFirst<F> = F extends (arg0: any, ...rest: infer R) => any ? R : never;
export {};
//# sourceMappingURL=request-signer.d.ts.map