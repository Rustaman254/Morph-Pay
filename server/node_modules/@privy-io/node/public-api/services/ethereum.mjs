export class PrivyEthereumService {
    constructor(privyWalletsService) {
        this.privyWalletsService = privyWalletsService;
    }
    async signMessage(walletId, { message, ...input }) {
        let params;
        if (message instanceof Uint8Array) {
            // We fall back to `Buffer` here as Uint8Array.toHex is not widely supported yet
            params = { message: Buffer.from(message).toString('hex'), encoding: 'hex' };
        }
        else if (message.startsWith('0x')) {
            // The 0x prefix is removed as `encoding: hex` is sufficient
            params = { message: message.slice(2), encoding: 'hex' };
        }
        else {
            params = { message, encoding: 'utf-8' };
        }
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            params,
            method: 'personal_sign',
            chain_type: 'ethereum',
        });
        return response.data;
    }
    async signSecp256k1(walletId, input) {
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'secp256k1_sign',
            chain_type: 'ethereum',
        });
        return response.data;
    }
    async sign7702Authorization(walletId, input) {
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'eth_sign7702Authorization',
            chain_type: 'ethereum',
        });
        return response.data;
    }
    async signTransaction(walletId, input) {
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'eth_signTransaction',
            chain_type: 'ethereum',
        });
        return response.data;
    }
    async signTypedData(walletId, input) {
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'eth_signTypedData_v4',
            chain_type: 'ethereum',
        });
        return response.data;
    }
    async sendTransaction(walletId, input) {
        const response = await this.privyWalletsService.rpc(walletId, {
            ...input,
            method: 'eth_sendTransaction',
            chain_type: 'ethereum',
        });
        return response.data;
    }
}
//# sourceMappingURL=ethereum.mjs.map