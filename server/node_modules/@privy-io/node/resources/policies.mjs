// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../core/resource.mjs";
import { buildHeaders } from "../internal/headers.mjs";
import { path } from "../internal/utils/path.mjs";
export class Policies extends APIResource {
    /**
     * Create a new policy.
     *
     * @example
     * ```ts
     * const policy = await client.policies.create({
     *   chain_type: 'ethereum',
     *   name: 'name',
     *   rules: [
     *     {
     *       action: 'ALLOW',
     *       conditions: [
     *         {
     *           field: 'to',
     *           field_source: 'ethereum_transaction',
     *           operator: 'eq',
     *           value: 'string',
     *         },
     *       ],
     *       method: 'eth_sendTransaction',
     *       name: 'name',
     *     },
     *   ],
     *   version: '1.0',
     * });
     * ```
     */
    create(params, options) {
        const { 'privy-idempotency-key': privyIdempotencyKey, ...body } = params;
        return this._client.post('/v1/policies', {
            body,
            ...options,
            headers: buildHeaders([
                { ...(privyIdempotencyKey != null ? { 'privy-idempotency-key': privyIdempotencyKey } : undefined) },
                options?.headers,
            ]),
        });
    }
    /**
     * Create a new rule for a policy.
     *
     * @example
     * ```ts
     * const response = await client.policies._createRule(
     *   'xxxxxxxxxxxxxxxxxxxxxxxx',
     *   {
     *     action: 'ALLOW',
     *     conditions: [
     *       {
     *         field: 'to',
     *         field_source: 'ethereum_transaction',
     *         operator: 'eq',
     *         value: 'string',
     *       },
     *     ],
     *     method: 'eth_sendTransaction',
     *     name: 'name',
     *   },
     * );
     * ```
     */
    _createRule(policyID, params, options) {
        const { 'privy-authorization-signature': privyAuthorizationSignature, ...body } = params;
        return this._client.post(path `/v1/policies/${policyID}/rules`, {
            body,
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Delete a policy by policy ID.
     *
     * @example
     * ```ts
     * const response = await client.policies._delete(
     *   'xxxxxxxxxxxxxxxxxxxxxxxx',
     * );
     * ```
     */
    _delete(policyID, params = {}, options) {
        const { 'privy-authorization-signature': privyAuthorizationSignature } = params ?? {};
        return this._client.delete(path `/v1/policies/${policyID}`, {
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Delete a rule by policy ID and rule ID.
     *
     * @example
     * ```ts
     * const response = await client.policies._deleteRule(
     *   'xxxxxxxxxxxxxxxxxxxxxxxx',
     *   { policy_id: 'xxxxxxxxxxxxxxxxxxxxxxxx' },
     * );
     * ```
     */
    _deleteRule(ruleID, params, options) {
        const { policy_id, 'privy-authorization-signature': privyAuthorizationSignature } = params;
        return this._client.delete(path `/v1/policies/${policy_id}/rules/${ruleID}`, {
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Update a policy by policy ID.
     *
     * @example
     * ```ts
     * const policy = await client.policies._update(
     *   'xxxxxxxxxxxxxxxxxxxxxxxx',
     * );
     * ```
     */
    _update(policyID, params, options) {
        const { 'privy-authorization-signature': privyAuthorizationSignature, ...body } = params;
        return this._client.patch(path `/v1/policies/${policyID}`, {
            body,
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Update a rule by policy ID and rule ID.
     *
     * @example
     * ```ts
     * const response = await client.policies._updateRule(
     *   'xxxxxxxxxxxxxxxxxxxxxxxx',
     *   {
     *     policy_id: 'xxxxxxxxxxxxxxxxxxxxxxxx',
     *     action: 'ALLOW',
     *     conditions: [
     *       {
     *         field: 'to',
     *         field_source: 'ethereum_transaction',
     *         operator: 'eq',
     *         value: 'string',
     *       },
     *     ],
     *     method: 'eth_sendTransaction',
     *     name: 'name',
     *   },
     * );
     * ```
     */
    _updateRule(ruleID, params, options) {
        const { policy_id, 'privy-authorization-signature': privyAuthorizationSignature, ...body } = params;
        return this._client.patch(path `/v1/policies/${policy_id}/rules/${ruleID}`, {
            body,
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Get a policy by policy ID.
     *
     * @example
     * ```ts
     * const policy = await client.policies.get(
     *   'xxxxxxxxxxxxxxxxxxxxxxxx',
     * );
     * ```
     */
    get(policyID, options) {
        return this._client.get(path `/v1/policies/${policyID}`, options);
    }
    /**
     * Get a rule by policy ID and rule ID.
     *
     * @example
     * ```ts
     * const response = await client.policies.getRule(
     *   'xxxxxxxxxxxxxxxxxxxxxxxx',
     *   { policy_id: 'xxxxxxxxxxxxxxxxxxxxxxxx' },
     * );
     * ```
     */
    getRule(ruleID, params, options) {
        const { policy_id } = params;
        return this._client.get(path `/v1/policies/${policy_id}/rules/${ruleID}`, options);
    }
}
//# sourceMappingURL=policies.mjs.map