// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../core/resource.mjs";
import * as BalanceAPI from "./balance.mjs";
import { Balance } from "./balance.mjs";
import * as TransactionsAPI from "./transactions.mjs";
import { Transactions } from "./transactions.mjs";
import { Cursor } from "../../core/pagination.mjs";
import { buildHeaders } from "../../internal/headers.mjs";
import { path } from "../../internal/utils/path.mjs";
export class Wallets extends APIResource {
    constructor() {
        super(...arguments);
        this.transactions = new TransactionsAPI.Transactions(this._client);
        this.balance = new BalanceAPI.Balance(this._client);
    }
    /**
     * Create a new wallet.
     *
     * @example
     * ```ts
     * const wallet = await client.wallets.create({
     *   chain_type: 'ethereum',
     * });
     * ```
     */
    create(params, options) {
        const { 'privy-idempotency-key': privyIdempotencyKey, ...body } = params;
        return this._client.post('/v1/wallets', {
            body,
            ...options,
            headers: buildHeaders([
                { ...(privyIdempotencyKey != null ? { 'privy-idempotency-key': privyIdempotencyKey } : undefined) },
                options?.headers,
            ]),
        });
    }
    /**
     * Get all wallets in your app.
     *
     * @example
     * ```ts
     * // Automatically fetches more pages as needed.
     * for await (const wallet of client.wallets.list()) {
     *   // ...
     * }
     * ```
     */
    list(query = {}, options) {
        return this._client.getAPIList('/v1/wallets', (Cursor), { query, ...options });
    }
    /**
     * Export a wallet's private key
     *
     * @example
     * ```ts
     * const response = await client.wallets._export('wallet_id', {
     *   encryption_type: 'HPKE',
     *   recipient_public_key:
     *     'BDAZLOIdTaPycEYkgG0MvCzbIKJLli/yWkAV5yCa9yOsZ4JsrLweA5MnP8YIiY4k/RRzC+APhhO+P+Hoz/rt7Go=',
     * });
     * ```
     */
    _export(walletID, params, options) {
        const { 'privy-authorization-signature': privyAuthorizationSignature, ...body } = params;
        return this._client.post(path `/v1/wallets/${walletID}/export`, {
            body,
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Initialize a wallet import. Complete by submitting the import.
     *
     * @example
     * ```ts
     * const response = await client.wallets._initImport({
     *   address: 'address',
     *   chain_type: 'ethereum',
     *   encryption_type: 'HPKE',
     *   entropy_type: 'hd',
     *   index: 0,
     * });
     * ```
     */
    _initImport(body, options) {
        return this._client.post('/v1/wallets/import/init', { body, ...options });
    }
    /**
     * Sign a message with a wallet by wallet ID.
     *
     * @example
     * ```ts
     * const response = await client.wallets._rawSign(
     *   'wallet_id',
     *   { params: {} },
     * );
     * ```
     */
    _rawSign(walletID, params, options) {
        const { 'privy-authorization-signature': privyAuthorizationSignature, 'privy-idempotency-key': privyIdempotencyKey, ...body } = params;
        return this._client.post(path `/v1/wallets/${walletID}/raw_sign`, {
            body,
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                    ...(privyIdempotencyKey != null ? { 'privy-idempotency-key': privyIdempotencyKey } : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Sign a message or transaction with a wallet by wallet ID.
     *
     * @example
     * ```ts
     * const response = await client.wallets._rpc('wallet_id', {
     *   method: 'eth_signTransaction',
     *   params: { transaction: {} },
     * });
     * ```
     */
    _rpc(walletID, params, options) {
        const { 'privy-authorization-signature': privyAuthorizationSignature, 'privy-idempotency-key': privyIdempotencyKey, ...body } = params;
        return this._client.post(path `/v1/wallets/${walletID}/rpc`, {
            body,
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                    ...(privyIdempotencyKey != null ? { 'privy-idempotency-key': privyIdempotencyKey } : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Submit a wallet import request.
     *
     * @example
     * ```ts
     * const wallet = await client.wallets._submitImport({
     *   wallet: {
     *     address: '0xF1DBff66C993EE895C8cb176c30b07A559d76496',
     *     chain_type: 'ethereum',
     *     ciphertext:
     *       'PRoRXygG+YYSDBXjCopNYZmx8Z6nvdl1D0lpePTYZdZI2VGfK+LkFt+GlEJqdoi9',
     *     encapsulated_key:
     *       'BOhR6xITDt5THJawHHJKrKdI9CBr2M/SDWzZZAaOW4gCMsSpC65U007WyKiwuuOVAo1BNm4YgcBBROuMmyIZXZk=',
     *     encryption_type: 'HPKE',
     *     entropy_type: 'private-key',
     *   },
     * });
     * ```
     */
    _submitImport(body, options) {
        return this._client.post('/v1/wallets/import/submit', { body, ...options });
    }
    /**
     * Update a wallet's policies or authorization key configuration.
     *
     * @example
     * ```ts
     * const wallet = await client.wallets._update('wallet_id');
     * ```
     */
    _update(walletID, params, options) {
        const { 'privy-authorization-signature': privyAuthorizationSignature, ...body } = params;
        return this._client.patch(path `/v1/wallets/${walletID}`, {
            body,
            ...options,
            headers: buildHeaders([
                {
                    ...(privyAuthorizationSignature != null ?
                        { 'privy-authorization-signature': privyAuthorizationSignature }
                        : undefined),
                },
                options?.headers,
            ]),
        });
    }
    /**
     * Obtain a session key to enable wallet access.
     *
     * @example
     * ```ts
     * const response = await client.wallets.authenticateWithJwt({
     *   user_jwt:
     *     'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30',
     * });
     * ```
     */
    authenticateWithJwt(body, options) {
        return this._client.post('/v1/wallets/authenticate', { body, ...options });
    }
    /**
     * Create wallets with an associated recovery user.
     *
     * @deprecated
     */
    createWalletsWithRecovery(body, options) {
        return this._client.post('/v1/wallets_with_recovery', { body, ...options });
    }
    /**
     * Get a wallet by wallet ID.
     *
     * @example
     * ```ts
     * const wallet = await client.wallets.get('wallet_id');
     * ```
     */
    get(walletID, options) {
        return this._client.get(path `/v1/wallets/${walletID}`, options);
    }
}
Wallets.Transactions = Transactions;
Wallets.Balance = Balance;
//# sourceMappingURL=wallets.mjs.map