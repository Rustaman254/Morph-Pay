import { CryptoKey, JWTVerifyGetKey } from 'jose';
import { PrivyAPIError } from "../core/error.js";
import { User } from "../resources.js";
export type VerifyAuthTokenInput = {
    /** The authentication token to verify. */
    auth_token: string;
    /** The Privy app ID to verify the token against. */
    app_id: string;
    /**
     * The verification key to use to verify the token, or a mechanism to get the it such as via JWKS.
     * You can find this verification key (or a JWKS endpoint) in the Privy dashboard.
     * @see {@link createRemoteJWKSet}
     * @see {@link importSPKI}
     */
    verification_key: CryptoKey | JWTVerifyGetKey | string;
};
export type VerifyAuthTokenResponse = {
    /** The Privy app ID for which the token was issued. */
    app_id: string;
    /** The issuer of the token. */
    issuer: string;
    /** The issued at unix timestamp of the token. */
    issued_at: number;
    /** The expiration unix timestamp of the token. */
    expiration: number;
    /** The ID of the session for which the token was issued. */
    session_id: string;
    /** The ID of the user for which the token was issued. */
    user_id: string;
};
/**
 * Verifies a Privy-issued authentication token.
 *
 * @returns The payload of the token if it is valid.
 * @throws If the token is invalid.
 */
export declare function verifyAuthToken({ auth_token: authToken, app_id: appId, verification_key: verificationKeyOrString, }: VerifyAuthTokenInput): Promise<VerifyAuthTokenResponse>;
export type VerifyIdentityTokenInput = {
    /** The identity token to verify. */
    identity_token: string;
    /** The Privy app ID to verify the token against. */
    app_id: string;
    /**
     * The verification key to use to verify the token, or a mechanism to get the it such as via JWKS.
     * You can find this verification key (or a JWKS endpoint) in the Privy dashboard.
     * @see {@link createRemoteJWKSet}
     * @see {@link importSPKI}
     */
    verification_key: CryptoKey | JWTVerifyGetKey | string;
};
/**
 * Verifies an identity token, parsing it into a `User` object if it is valid.
 *
 * @returns The user object parsed from the identity token.
 * @throws If the token or its payload is invalid.
 */
export declare function verifyIdentityToken({ identity_token: identityToken, app_id: appId, verification_key: verificationKeyOrString, }: VerifyIdentityTokenInput): Promise<User>;
export declare class InvalidAuthTokenError extends PrivyAPIError {
}
export interface CreatePrivyAppJWKSInput {
    appId: string;
    apiUrl: string;
    headers: Record<string, string>;
    verificationKeyOverride?: string | undefined;
}
export type PrivyAppJWKS = JWTVerifyGetKey;
export declare function createPrivyAppJWKS({ appId, apiUrl, headers, verificationKeyOverride, }: CreatePrivyAppJWKSInput): PrivyAppJWKS;
//# sourceMappingURL=auth.d.ts.map